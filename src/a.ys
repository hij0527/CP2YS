(define f::(-> (bitvector 32) (bitvector 32) bool) 
  (lambda (f@x$1::(bitvector 32) f@z$1::(bitvector 32))
    (let ((f@y$1 (mk-bv 32 123))
	(f@k$1 (bv-add (bv-mul (mk-bv 32 10) f@x$1) f@z$1)))
	(ite (and true (= f@y$1 f@k$1)) true (ite (and true (not (= f@y$1 f@k$1))) (= f@k$1 f@z$1) false)))))
(define g::(-> (bitvector 32) (bitvector 32) (bitvector 32)) 
  (lambda (g@y$1::(bitvector 32) g@w$1::(bitvector 32))
    (let ((g@y$2 (bv-mul (bv-lshr g@y$1 (mk-bv 32 5)) g@w$1))
	(g@y$3 (bv-and g@y$2 (mk-bv 32 3))))
	(ite (and true (/= (bv-rem g@y$1 (mk-bv 32 32)) (mk-bv 32 16))) (mk-bv 32 0) (ite (and true (= g@y$3 (mk-bv 32 3))) (mk-bv 32 0) (ite (and true (not (= g@y$3 (mk-bv 32 3)))) g@y$3 (mk-bv 32 0)))))))
(define h::(-> (bitvector 32) (bitvector 32) bool) 
  (lambda (h@a$1::(bitvector 32) h@b$1::(bitvector 32))
    (let ((h@a$2 (bv-add h@a$1 (mk-bv 32 1)))
	(h@a$3 (ite (= h@b$1 (mk-bv 32 0)) h@a$1 h@a$2))
	(h@a$4 (bv-add h@a$3 (g h@b$1 (mk-bv 32 1))))
	(h@a$5 (ite (/= (bv-rem h@a$3 h@b$1) (mk-bv 32 0)) h@a$3 h@a$4))
	(h@a$6 (bv-add h@a$5 (mk-bv 32 1)))
	(h@a$7 (ite (bv-gt (bv-add h@a$5 h@b$1) (mk-bv 32 150)) h@a$5 h@a$6)))
	(ite (and true (= h@b$1 (mk-bv 32 0))) false (ite (and true (/= (bv-rem h@a$3 h@b$1) (mk-bv 32 0))) false (ite (and true (bv-gt (bv-add h@a$5 h@b$1) (mk-bv 32 150))) false (ite (and true (bv-gt (bv-shl (bv-sub h@a$7 h@b$1) (mk-bv 32 1)) (mk-bv 32 200))) false (and (bv-ge h@a$7 (mk-bv 32 80)) (bv-le h@b$1 (mk-bv 32 20))))))))))
(define v$1::(bitvector 32))
(define x$1::(bitvector 32))
(define y$1::(bitvector 32))
(define z$1::(bitvector 32) (bv-add x$1 y$1))
(define w$1::(bitvector 32) (mk-bv 32 0))
(assert (not (and true (or (or (bv-gt v$1 (mk-bv 32 100)) (bv-gt x$1 (mk-bv 32 20))) (bv-lt y$1 (mk-bv 32 10))))))
(define w$2::(bitvector 32) (mk-bv 32 3))
(define w$3::(bitvector 32) (ite (f x$1 z$1) w$2 w$1))
(assert (not (and true (= (g v$1 w$3) (mk-bv 32 0)))))
(define z$2::(bitvector 32) (bv-add v$1 z$1))
(define z$3::(bitvector 32) (ite (= (g v$1 w$3) (mk-bv 32 0)) z$1 z$2))
(assert (and true (h z$3 y$1)))
(assert (not (and true (not (h z$3 y$1)))))
(check)
(show-model)

